{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","_this$props","this","props","name","photo","types","react_default","a","createElement","src","className","alt","map","pokemonType","index","key","React","Component","PokeList","pokemon","id","components_Pokemon","url","evolution","App","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSA2BeA,gMAtBJ,IAAAC,EACsBC,KAAKC,MAA3BC,EADAH,EACAG,KAAMC,EADNJ,EACMI,MAAOC,EADbL,EACaK,MACpB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAOM,UAAU,QAAQC,IAAKR,IACxCG,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QAAQP,GACrBG,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAASL,EAAMO,IAAI,SAACC,EAAaC,GAC7C,OACER,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAeK,IAAKD,GAAQD,cAThCG,IAAMC,YCyBbC,0LAtBP,OACIZ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACTT,KAAKC,MAAMiB,QAAQP,IAAI,SAAAO,GACpB,OACIb,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAcK,IAAKI,EAAQC,IACrCd,EAAAC,EAAAC,cAACa,EAAD,CACIlB,KAAMgB,EAAQhB,KACdC,MAAOe,EAAQG,IACfjB,MAAOc,EAAQd,mBAVxBW,IAAMC,YCDvBE,EAAU,CACd,CAAEC,GAAM,EAAGjB,KAAQ,YAAaE,MAAS,CAAC,SAAU,SAAUkB,UAAa,KAAMD,IAAO,kFACxF,CAAEF,GAAM,EAAGjB,KAAQ,UAAWE,MAAS,CAAC,SAAU,SAAUkB,UAAa,YAAaD,IAAO,kFAC7F,CAAEF,GAAM,EAAGjB,KAAQ,WAAYE,MAAS,CAAC,SAAU,SAAUkB,UAAa,UAAWD,IAAO,kFAC5F,CAAEF,GAAM,EAAGjB,KAAQ,aAAcE,MAAS,CAAC,QAASkB,UAAa,KAAMD,IAAO,kFAC9E,CAAEF,GAAM,EAAGjB,KAAQ,aAAcE,MAAS,CAAC,QAASkB,UAAa,aAAcD,IAAO,kFACtF,CAAEF,GAAM,EAAGjB,KAAQ,YAAaE,MAAS,CAAC,SAAU,QAASkB,UAAa,aAAcD,IAAO,kFAC/F,CAAEF,GAAM,EAAGjB,KAAQ,WAAYE,MAAS,CAAC,SAAUkB,UAAa,KAAMD,IAAO,kFAC7E,CAAEF,GAAM,EAAGjB,KAAQ,YAAaE,MAAS,CAAC,SAAUkB,UAAa,WAAYD,IAAO,kFACpF,CAAEF,GAAM,EAAGjB,KAAQ,YAAaE,MAAS,CAAC,SAAUkB,UAAa,YAAaD,IAAO,kFACrF,CAAEF,GAAM,GAAIjB,KAAQ,WAAYE,MAAS,CAAC,OAAQkB,UAAa,KAAMD,IAAO,oFAc/DE,mLATX,OACElB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACiB,EAAD,CAAUN,QAASA,YALTH,IAAMC,WCLJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56ce952f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/Pokemon.css';\n\nclass Pokemon extends React.Component {\n  render() {\n    const {name, photo, types} = this.props;\n    return (\n      <div>\n        <img src={photo} className=\"photo\" alt={name} />\n        <p className=\"name\">{name}</p>\n        <ul className=\"types\">{types.map((pokemonType, index) => {\n          return (\n            <li className=\"pokemonTypes\" key={index}>{pokemonType}</li>\n          )\n        })}</ul>\n      </div>\n    );\n  }\n}\n\nPokemon.propTypes = {\n  name: PropTypes.string,\n  photo: PropTypes.string,\n  types: PropTypes.array\n};\n\nexport default Pokemon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Pokemon from './Pokemon';\nimport '../stylesheets/PokeList.css';\n\nclass PokeList extends React.Component {\n    render() {\n        return (\n            <ul className=\"pokemonList\">\n                {this.props.pokemon.map(pokemon => {\n                    return (\n                        <li className=\"pokemonItem\" key={pokemon.id}>\n                            <Pokemon\n                                name={pokemon.name}\n                                photo={pokemon.url}\n                                types={pokemon.types}\n                            />\n                        </li>\n                    )\n                })}\n            </ul>\n        )\n    }\n}\n\nPokeList.propTypes = {\n    pokemon: PropTypes.array\n};\n\nexport default PokeList;","import React from 'react';\nimport './App.css';\nimport PokeList from './components/PokeList';\n\nconst pokemon = [\n  { \"id\": 1, \"name\": \"bulbasaur\", \"types\": [\"poison\", \"grass\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\" },\n  { \"id\": 2, \"name\": \"ivysaur\", \"types\": [\"poison\", \"grass\"], \"evolution\": \"bulbasaur\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\" },\n  { \"id\": 3, \"name\": \"venusaur\", \"types\": [\"poison\", \"grass\"], \"evolution\": \"ivysaur\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\" },\n  { \"id\": 4, \"name\": \"charmander\", \"types\": [\"fire\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\" },\n  { \"id\": 5, \"name\": \"charmeleon\", \"types\": [\"fire\"], \"evolution\": \"charmander\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\" },\n  { \"id\": 6, \"name\": \"charizard\", \"types\": [\"flying\", \"fire\"], \"evolution\": \"charmeleon\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\" },\n  { \"id\": 7, \"name\": \"squirtle\", \"types\": [\"water\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\" },\n  { \"id\": 8, \"name\": \"wartortle\", \"types\": [\"water\"], \"evolution\": \"squirtle\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\" },\n  { \"id\": 9, \"name\": \"blastoise\", \"types\": [\"water\"], \"evolution\": \"wartortle\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\" },\n  { \"id\": 10, \"name\": \"caterpie\", \"types\": [\"bug\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\" }\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Mi lista de Pok√©mon</h1>\n        <PokeList pokemon={pokemon}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}